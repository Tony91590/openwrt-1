--- a/drivers/net/wireless/ath/ath11k/dbring.c
+++ b/drivers/net/wireless/ath/ath11k/dbring.c

@@ -8,8 +8,7 @@

static int ath11k_dbring_bufs_replenish(struct ath11k *ar,
					struct ath11k_dbring *ring,
-					struct ath11k_dbring_element *buff,
-					gfp_t gfp)
+					struct ath11k_dbring_element *buff)
{
	struct ath11k_base *ab = ar->ab;
	struct hal_srng *srng;
@@ -35,7 +34,7 @@ static int ath11k_dbring_bufs_replenish(struct ath11k *ar,
		goto err;

	spin_lock_bh(&ring->idr_lock);
-	buf_id = idr_alloc(&ring->bufs_idr, buff, 0, ring->bufs_max, gfp);
+	buf_id = idr_alloc(&ring->bufs_idr, buff, 0, ring->bufs_max, GFP_ATOMIC);
	spin_unlock_bh(&ring->idr_lock);
	if (buf_id < 0) {
		ret = -ENOBUFS;
@@ -72,8 +71,7 @@ err:
}

static int ath11k_dbring_fill_bufs(struct ath11k *ar,
-				   struct ath11k_dbring *ring,
-				   gfp_t gfp)
+				   struct ath11k_dbring *ring)
{
	struct ath11k_dbring_element *buff;
	struct hal_srng *srng;
@@ -89,17 +87,23 @@ static int ath11k_dbring_fill_bufs(struct ath11k *ar,
	req_entries = min(num_free, ring->bufs_max);
	num_remain = req_entries;
	align = ring->buf_align;
-	size = sizeof(*buff) + ring->buf_sz + align - 1;
+	size = ring->buf_sz + align - 1;

	while (num_remain > 0) {
-		buff = kzalloc(size, gfp);
+		buff = kzalloc(sizeof(*buff), GFP_ATOMIC);
		if (!buff)
			break;

-		ret = ath11k_dbring_bufs_replenish(ar, ring, buff, gfp);
+		buff->payload = kzalloc(size, GFP_ATOMIC);
+		if (!buff->payload) {
+			kfree(buff);
+			break;
+		}
+		ret = ath11k_dbring_bufs_replenish(ar, ring, buff);
		if (ret) {
			ath11k_warn(ar->ab, "failed to replenish db ring num_remain %d req_ent %d\n",
				    num_remain, req_entries);
+            kfree(buff->payload);
			kfree(buff);
			break;
		}
@@ -176,7 +180,7 @@ int ath11k_dbring_buf_setup(struct ath11k *ar,
	ring->hp_addr = ath11k_hal_srng_get_hp_addr(ar->ab, srng);
	ring->tp_addr = ath11k_hal_srng_get_tp_addr(ar->ab, srng);

-	ret = ath11k_dbring_fill_bufs(ar, ring, GFP_KERNEL);
+	ret = ath11k_dbring_fill_bufs(ar, ring);

	return ret;
}
@@ -284,7 +288,7 @@ int ath11k_dbring_buffer_release_event(struct ath11k_base *ab,

	srng = &ab->hal.srng_list[ring->refill_srng.ring_id];
	num_entry = ev->fixed.num_buf_release_entry;
-	size = sizeof(*buff) + ring->buf_sz + ring->buf_align - 1;
+	size = ring->buf_sz + ring->buf_align - 1;
	num_buff_reaped = 0;

	spin_lock_bh(&srng->lock);
@@ -321,8 +325,9 @@ int ath11k_dbring_buffer_release_event(struct ath11k_base *ab,
			ring->handler(ar, &handler_data);
		}

-		memset(buff, 0, size);
-		ath11k_dbring_bufs_replenish(ar, ring, buff, GFP_ATOMIC);
+                buff->paddr = 0;
+		memset(buff->payload, 0, size);
+		ath11k_dbring_bufs_replenish(ar, ring, buff);
	}

	spin_unlock_bh(&srng->lock);
@@ -348,6 +353,7 @@ void ath11k_dbring_buf_cleanup(struct ath11k *ar, struct ath11k_dbring *ring)
		idr_remove(&ring->bufs_idr, buf_id);
		dma_unmap_single(ar->ab->dev, buff->paddr,
				 ring->buf_sz, DMA_FROM_DEVICE);
+               kfree(buff->payload)
		kfree(buff);
	}
